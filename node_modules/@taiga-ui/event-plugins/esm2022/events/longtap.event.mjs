import { LongtapEvent } from '../types/longtap.event';
import { isIos } from '../utils/is-ios';
const TAP_DELAY = 700;
const SAFE_NAVIGATOR = typeof navigator === 'undefined' ? null : navigator;
const MOVE_THRESHOLD = 15;
export class LongtapEventPlugin {
    constructor() {
        this.isIOS = !!SAFE_NAVIGATOR && isIos(SAFE_NAVIGATOR);
    }
    addEventListener(element, _event, handler) {
        const removeLongtapEventPolyfill = this.isIOS
            ? this.listenTouchEvents(element)
            : this.listenContextmenuEvent(element);
        element.addEventListener('longtap', handler);
        return () => {
            removeLongtapEventPolyfill();
            element.removeEventListener('longtap', handler);
        };
    }
    supports(event) {
        return event === 'longtap';
    }
    listenContextmenuEvent(element) {
        return this.manager.addEventListener(element, 'contextmenu.prevent.stop', ({ clientX, clientY }) => {
            this.dispatchLongtapEvent(element, clientX, clientY);
        });
    }
    listenTouchEvents(element) {
        let longTapTimeout = null;
        let touchStartCoords = null;
        const reset = () => {
            clearTimeout(longTapTimeout);
            touchStartCoords = null;
            longTapTimeout = null;
        };
        const removeTouchstartListener = this.manager.addEventListener(element, 'touchstart.silent.passive', ({ touches }) => {
            const touch = touches[0];
            if (!touch) {
                return;
            }
            const { clientX, clientY } = touch;
            touchStartCoords = { clientX, clientY };
            longTapTimeout = setTimeout(() => {
                this.dispatchLongtapEvent(element, clientX, clientY);
                reset();
            }, TAP_DELAY);
        });
        const removeTouchmoveListener = this.manager.addEventListener(element, 'touchmove.silent.passive', ({ touches }) => {
            const touch = touches[0];
            if (!touch || !touchStartCoords) {
                return;
            }
            const { clientX, clientY } = touch;
            if (Math.hypot(clientX - touchStartCoords.clientX, clientY - touchStartCoords.clientY) <= MOVE_THRESHOLD) {
                return;
            }
            reset();
        });
        const removeTouchcancelListener = this.manager.addEventListener(element, 'touchcancel.silent.passive', reset);
        const removeTouchendListener = this.manager.addEventListener(element, 'touchend.silent.passive', reset);
        return () => {
            removeTouchstartListener();
            removeTouchmoveListener();
            removeTouchcancelListener();
            removeTouchendListener();
        };
    }
    dispatchLongtapEvent(element, clientX, clientY) {
        element.dispatchEvent(new LongtapEvent('longtap', {
            clientX,
            clientY,
            bubbles: false,
            cancelable: false,
            composed: false,
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,